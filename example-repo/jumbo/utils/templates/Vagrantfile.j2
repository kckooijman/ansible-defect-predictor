######################################################################
# File automatically-generated by Jumbo. Do not edit!
######################################################################

# -*- mode: ruby -*-
# vi: set ft=ruby :

box = "centos/7"

if Vagrant::VERSION == '1.8.5'
  ui = Vagrant::UI::Colored.new
  ui.error 'Unsupported Vagrant Version: 1.8.5'
  ui.error 'Version 1.8.5 introduced an SSH key permissions bug, please upgrade to version 1.8.6+'
  ui.error ''
end

Vagrant.configure("2") do |config|
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.boot_timeout = 999999
  config.ssh.insert_key = false
  ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
  vagrant_insecure_key = File.read("#{Dir.home}/.vagrant.d/insecure_private_key")
  config.vm.box_check_update = false
  config.vm.provider :libvirt do |libvirt|
  # Don't forget to create your storage pool
    libvirt.storage_pool_name="{{ pool_name }}"
    libvirt.driver="kvm"
    libvirt.uri="qemu:///system"
  end
  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vm.provider :virtualbox do |vb|
      config.vbguest.no_remote = true
      config.vbguest.auto_update = false
    end
  end
  {% set host_nb = 24010 %}
  {% for host in hosts %}
  config.vm.define :{{ host.name }}_{{ cluster }} do |node|
    node.vm.box = box
    node.vm.network :private_network, ip: "{{ host.ip }}"
    node.vm.network :forwarded_port, guest: 22, host: {{ host_nb + loop.index }}, auto_correct: true
    node.vm.provider "libvirt" do |d|
      d.memory = {{ host.ram }}
      d.graphics_type = "none"
      d.cpus = {{ host.cpus }}
    end
    node.vm.provider "virtualbox" do |d|
      d.name =  "{{ host.name }}.{{ domain }}"
      d.memory = {{ host.ram }}
      d.cpus = {{ host.cpus }}
      d.customize ["modifyvm", :id, "--ioapic", "on"]
    end
      {% if 'ansiblehost' in host.groups %}
    node.vm.provision "Import vagrant_insecure_key", type: "shell" do |s|
      s.inline = <<-SHELL
        sudo mkdir -p /root/.ssh/
        sudo echo "#{vagrant_insecure_key}" > /root/.ssh/id_rsa
        sudo chmod 600 /root/.ssh/id_rsa
        sudo head -1 /home/vagrant/.ssh/authorized_keys > /root/.ssh/id_rsa.pub
        echo "#{vagrant_insecure_key}" > /home/vagrant/.ssh/id_rsa
        chmod 600 /home/vagrant/.ssh/id_rsa
        sudo head -1 /home/vagrant/.ssh/authorized_keys >> /root/.ssh/authorized_keys
        head -1 /home/vagrant/.ssh/authorized_keys > /home/vagrant/.ssh/id_rsa.pub
        sudo chown vagrant -R /home/vagrant/.ssh/id_rsa
      SHELL
    end
    node.vm.provision "Import ssh config", type: "file", source: "#{Dir.pwd}/ssh_config", destination: "/home/vagrant/.ssh/config"
    node.vm.provision "Copy ssh config to root", type: "shell" do |s|
      s.inline = <<-SHELL
        sudo cp /home/vagrant/.ssh/config /root/.ssh/
      SHELL
    end
    node.vm.provision "Import playbook", type: "file", source: "#{Dir.pwd}/playbooks", destination: "/home/vagrant/cluster-playbook"
    node.vm.provision "shell", inline: "export ANSIBLE_FORCE_COLOR=True"
    node.vm.provision "Install ansible and run playbook", type: "ansible_local" do |ansible|
      ansible.playbook = "cluster-playbook/full-deploy.yml"
      ansible.provisioning_path = "/home/vagrant/"
      ansible.inventory_path = "cluster-playbook/inventory/"
      ansible.limit = "all"
    end
    {% endif %}
  end
  {% endfor %}
  config.vm.provision "Add ssh_pub_key", type: "shell" do |s|
    s.inline = <<-SHELL
      echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
      sudo mkdir -p /root/.ssh/
      sudo echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
      sudo touch /home/vagrant/.ssh/config
      sudo chmod 600 /home/vagrant/.ssh/config
      sudo chown vagrant /home/vagrant/.ssh/config
    SHELL
  end
end
